[{"id":0,"href":"/docs/c-course/basic/","title":"Básico","section":"Curso: Introdução à Programação com a Linguagem C","content":""},{"id":1,"href":"/docs/c-course/","title":"Curso: Introdução à Programação com a Linguagem C","section":"Docs","content":" Introdução à Programação com a Linguagem C # Programação é o método que utilizamos para criar sistemas computacionais, como jogos, websites, aplicativos de celular, e todos os sistemas de computador que encontramos em bancos, farmácias e supermercados.\nProgramar é a tarefa de se comunicar com o computador através da escrita de uma sequencia de tarefas (instruções) que desejamos que seja executada. Toda comunicação requer uma linguagem comum entre as entidades que se comunicam, neste caso entre o humano (o programador) e o computador. Dessa forma, aprenderemos uma linguagem de programação para nos comunicarmos com a computador.\nA linguagem C # C é uma linguagem de propósito geral. Isso quer dizer que ela pode ser utilizada para escrever programas para várias àreas diferentes. Sua linguagem segue um padrão procedural, permitindo a decomposição de problemas grande e complexos em procedimentos (módulos) separados e mais simples.\nComo toda linguagem de programação, C possui um conjuto de palavras reservadas que são utilizadas para a criação das instruções que comporão um programa. A palavras reservadas em C são:\nConfigurando o ambiente de programação # (Atividade desenvolvida no laboratório) - (será detalhado na página em breve)\nPrimeiro programa em C # Agora vamos executar o primeiro código em C. Ao ser executado, o programa irá imprimir na tela a mensagem \u0026ldquo;Olá mundo lindo!\u0026rdquo;. Digite o seguinte texto (código-fonte) em um arquivo chamado primeiro_programa.c:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026quot;Olá mundo lindo!\u0026quot;); return 0; } Vamos entender:\nVocê criará muitos arquivos com códigos em C daqui pra frente, e existem regras para a nomeação desses arquivos. As regras são:\nO arquivo deve ter a extensão .c. Não podem haver espaços no nome do arquivo. Por exemplo: \u0026ldquo;primeiro programa.c\u0026rdquo;. A maioria dos arquivos começará com instruções #include \u0026lt; \u0026hellip; \u0026gt;, chamadas de cabeçalho do programa. #include é uma instrução utilizada para adicionarmos procedimentos (funções) que já foram programados previamente. No exemplo, estamos adicionando ao nosso programa um arquivo presente no compilador C que foi instalado na sua máquina. O arquivo stdio.h contém código C (entederemos mais à frente a extensão .h) com procedimentos que permitem a entrada e saída de textos na tela.\nint main (){ \u0026hellip; } é uma sintaxe mandatória que identifica o ponto inicial de execução do seu código. Quando executado, o seu programa começará a executar as instruções criadas dentro desse bloco delimitado pelas chaves { }. Entenderemos melhor essa estrutura quando estudarmos a declaração de funções em C. No exemplo, temos duas instruções dentro do bloco main:\nprintf é uma função definida no arquivo stdio.h para impressão de textos na tela. O texto que será impresso deve ser colocado entre aspas. return é uma palavra reservada utilizada para finalizar a execução de um bloco de código. Mais exemplos ... #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026quot;Programação requer prática.\u0026quot;); printf(\u0026quot;Pratique!\u0026quot;); printf(\u0026quot;Pratique!\u0026quot;); return 0; } Exercício de programação ... TODO # Adicionar exercícios. Básico da Linguagem C # Estudaremos primeiro o que considero funcionalidades básicas da linguagem.\nComentários # Além de instruções, o seu programa pode conter comentários para auxiliar o entendimento do código. É uma boa prática de programação documentar o seu código com comentários informativos e instrutivos para auxiliar a manutenção do código. Existem dois tipos de comentários em C: de linha e de bloco. Ambos são ignorados pelo compilador na criação do arquivo executável do programa.\nO comentário de linha se inicia com duas barras (//) e seu escopo finaliza ao final de uma linha:\n//Este é um comentário de linha. //Este é outro comentário de linha. O comentário de bloco é delimitado pelos símbolos /* para abertura e */ para fechamento do bloco. Todas as linhas dentro do bloco fazem parte do mesmo comentário.\n/* Este é um comentário de bloco */ /* Este também é um comentário de bloco */ Ponto e vírgula # C utiliza ponto e vírgula como delimitador de instruções. É a forma que o compilador utiliza para saber como ler e separar as instruções no código. Note que, no nosso exemplo, temos duas instruções que são finalizadas com ponto e vírgula:\nprintf(\u0026quot;Olá mundo lindo!\u0026quot;); return 0; Algumas instruções já possuem o próprio delimitador, e não precisam de ponto e vírgula. Será fácil identificá-las quando você avançar no curso.\nVariáveis # Os dados que criamos e manipulamos em nosso programa precisam ser armazenados na memória do computador para que possam ser referenciados e utilizados no código. Linguagens de programação utilizam variáveis para este propósito. Em C, uma variável deve ser declarada no código com o seu tipo e um nome.\n//Sintaxe de instrução para criação de variável tipo nome; Os tipos são convenções definidas na linguagem, para que o compilador saiba a quantidade de memória máxima que será reservada para armazenar dados na variável. Os tipos básicos em C são:\nTipo Tamanho Descrição char 8 bits Armazena códigos correspondentes a um caracter da tabela ASCII. int 16 bits ou 32 bits Armazena números inteiros (positivos e negativos). float 32 bits Armazena números fracionários, com precisão de até sete dígitos. double 64 bits Armazena números fracionários, com precisão de até 15 dígitos. Estudaremos mais sobre os tipos de variáveis e como podem ser modificados ao longo do curso.\nExemplo de declaração de variáveis de cada tipo:\nint x; float y; char z; double k; Variáveis do mesmo tipo podem ser declaradas na mesma linha, separadas por vírgula. Exemplo:\nint x, w, q; //declaração de três variáveis do tipo int O nome da variável pode ser utilizado em diferentes partes do código para acessarmos o conteúdo presente na posição de memória correspondente.\nExistem regras para a nomeação das variáveis. São estas:\nPodem utilizar letras maiúsculas, letras minúsculas, números e o caracter sublinhado; Não podem ser iniciados com números; Não podem ser idênticos às palavras reservadas da linguagem. Exemplos de nomes válidos e inválidos:\n//Exemplos de nomes válidos int nomeValido01; float nome_valido_02; char _nomeValido_03; //Exemplos de nomes inválidos int int; int 2nome_invalido; Operador de atribuição # Como na matemática, atribuimos valor às variáveis com o símbolo de atribuição =. Podemos atribuir valor à uma variável em sua declaração, ou em outras partes do código após a sua declaração. Exemplos:\n//Atribuição de valores em conjunto com a declaração da variável int x = 10; //leia-se: x recebe o valor 10 float y = 10.123; char z = 'a'; //Atribuição de valores após a criação das variáveis x = 12; z = 15.0; z = 'b'; Podemos atribuir valor à mesma variável quantas vezes quisermos no mesmo programa, o valor da variável sempre é apagado da memória e substituido pelo valor mais recente que for atribuido.\nUma variável também pode receber o valor de outra variável na atribuição, por exemplo:\nint x, y; x = 10; y = x; // Atribuímos o valor 10 da variável x à variável y. Equivale à y = 10; Podemos também concatenar as atribuições de valores, por exemplo:\n//Atribuição na declaração concatenada de variáveis do mesmo tipo int x = 1, y = 2, z = 3; //Atribuição do mesmo valor à mais de uma variável. x = y = z = 4; Ao tipo char podem ser atribuídos o caracter envolto em aspas simples, como nos exemplos acima, ou o número inteiro correspondente da tabela ASCII. Exemplo:\nz = 'c'; z = 99; //Na tabela ASCII, 99 é o valor decimal do caracter c. Operadores aritméticos binários # Variáveis numéricas podem compor expressões aritméticas no código. Os operadores aplicados em C são:\nOperador Descrição Exemplo + soma z = x + y; - subtração z = x - y; * multiplicação z = x + y; / divisão z = x / y; % resto da divisão z = x % y; Da mesma forma que na matemática, a multiplicação e a divisão têm precedência à soma e à subtração. Para entender a execução de expressões com operadores de mesma precedência, saiba que a linguagem executará as operações da esquerda para a direita. Os parênteses também podem ser utilizados para organização de precedência na execução.\nOs operadores exemplificados acima são binários. Isto quer dizer que requerem dois elementos para realizar a operação. Nos exemplos da tabela temos x e y. Outros exemplos válidos são:\ny = 1 + 2; x = x + x; x = x - 1; z = 10 * y; Operadores aritméticos unários # Os operadores de adição e subtração também podem ser utilizados com uma única variável para incremento ou decremento do valor da variável. Neste caso, dizemos que o operador é unário. A sintaxe é diferente, pois duplicamos o operador. Veja os exemplos:\nx++; // equivale a x = x + 1; y--; // equivale a y = y - 1; Nos exemplos acima, o novo valor da variável será acessível a partir da próxima linha de código. Existe ainda a possibilidade de anteciparmos o acesso ao novo valor para a mesma linha da instrução que altera a variável. Para isso, mudamos a ordem dos operadores para:\n++x; // também incrementa 1 ao valor de x; --y; // também decrementa 1 ao valor de y; O operador de subtração também pode ser utilizado de forma unária para a declaração de números negativos. Exemplo:\nx = -1; y = - 10; Operadores relacionais # Operadores relacionais são utilizados para formar expressões que comparam dois ou mais elementos, para obter o resultado verdadeiro ou falso. Os operadores relacionais em C são:\nOperador Descrição Exemplo \u0026gt; maior que x \u0026gt; y \u0026lt; menor que x \u0026lt; y \u0026gt;= maior ou igual x \u0026gt;= y \u0026lt;= menor ou igual x \u0026lt;= y == igual a x == y != diferente de x != y Em C, as expressões relacionais retornam o valor 0 para informar que a expressão é falsa, e o valor 1 se o resultado da expressão for verdadeiro. Por exemplo:\nint x = 1, y = 2, z; z = x \u0026lt; y; // z recebe o valor 1, pois a expressão (1 é menor que 2) é verdadeira z = x == y; // z recebe o valor 0, pois a expressão (1 é igual a 2) é falsa Operadores lógicos # A lógica boleana é frequentemente utilizada quando programamos. Com a lógica boleana, podemos compor expressões utilizando os operadores binários E e OU, e o operador unário de negação NÃO. Os resultados das expressões serão sempre verdadeiros ou falsos. A semântica dos operadores está resumida nas tabelas abaixo:\nTabela do operador E (Lemos assim: verdadeiro e verdadeiro, é igual a verdadeiro):\nOperando Operador Operando Resultado verdadeiro E verdadeiro verdadeiro verdadeiro E falso falso falso E verdadeiro falso falso E falso falso Tabela do operador OU:\nOperando Operador Operando Resultado verdadeiro OU verdadeiro verdadeiro verdadeiro OU falso verdadeiro falso OU verdadeiro verdadeiro falso OU falso falso A tabela do operador de negação é mais simples. Vamos inverter a ordem do operador, para ler assim: \u0026ldquo;Não verdadeiro, é igual a falso.\u0026rdquo;:\nOperador Operando Resultado NÃO verdadeiro falso NÃO falso verdadeiro Em C, a sintaxe dos operadores boleanos E e OU é, respectivamente, \u0026amp;\u0026amp; e ||. A sintaxe do operador NÃO é o símbolo de exclamação !. Lembremos que, como resultado de expressões, o 0 representa falso e 1 representa verdadeiro. Dessa forma, utilizando a sintaxe em C, as tabelas são:\nOperador \u0026amp;\u0026amp; (E):\nOperando Operador Operando Resultado 1 \u0026amp;\u0026amp; 1 1 1 \u0026amp;\u0026amp; 0 0 0 \u0026amp;\u0026amp; 0 0 0 \u0026amp;\u0026amp; 0 0 Operador || (OU):\nOperando Operador Operando Resultado 1 || 1 1 1 || 0 1 0 || 0 1 0 || 0 0 Operador de negação ! :\nOperador Operando Resultado ! 1 0 ! 0 1 Os operadores lógicos são comumente utilizados em conjunto com outros operadores, por exemplo:\nint x = 1, y = 2, z = 3, w; w = (x \u0026lt; y) \u0026amp;\u0026amp; (x \u0026lt; z); // w recebe o valor 1, como resultado de (1) \u0026amp;\u0026amp; (1) w = (x == y) \u0026amp;\u0026amp; (x \u0026lt; z); // w recebe o valor 0, como resultado de (0) \u0026amp;\u0026amp; (1) w = (x \u0026gt;= y) || (x \u0026lt; z); // w recebe o valor 1, como resultado de (0) || (1) w = (x == y) || (x == z); // w recebe o valor 0, como resultado de (0) || (0) w = !(x == y); // w recebe o valor 1, como resultado de !(0) Comandos condicionais # Podemos adicionar avaliação de condições no código para decidir se um conjunto de instruções deverá ser executado. Condições são expressões cujo resultado será verdadeiro ou falso. Uma vez verdadeiro, o código associado à estrutura condicional será executado. A linguagem C possui três formas de estruturas condicionais: IF-ELSE, SWITCH-CASE, e a estrutura condição ? verdadeiro : falso.\nIF-ELSE # Vamos começar entendo a estrutura de código condicional utilizando apenas o comando IF. A sintaxe do comando é: (Leia-se: SE condição for verdadeira, ENTÃO a instrução seguinte será executada. )\nif (condição) instrução; Por exemplo: (Leia-se: SE x for maior que zero, ENTÃO imprima na tela o texto \u0026ldquo;O valor de x é positivo\u0026rdquo;. )\nif (x \u0026gt; 0) printf(\u0026quot;O valor de x é positivo.\u0026quot;); A sintaxe acima funciona apenas para avaliação condicional de uma única linha de instrução. Para incluir mais linhas de instrução, devemos adicionar um par de chaves {} para iniciar e fechar um bloco de instruções. Dessa forma, todas as instruções dentro do bloco serão executadas apenas se a condição for verdadeira.\nif (condição){ // inicio do bloco de instruções; instrução_01; instrução_02; ... instrução_N; } // final do bloco de instruções; Exemplo:\nif (x \u0026gt; 0){ printf(\u0026quot;O valor de x é positivo.\u0026quot;); x = x + 1; z = x; } Podemos também escrever instruções que deverão ser executadas caso a condição seja falsa. Para isso, complementamos a estrutura do IF com o ELSE. A sintaxe é: (Leia-se: SE condição for verdadeira, ENTÃO instrução_se_condição_verdadeira será executada, SE NÃO, instrução_se_condição_falsa será executada. )\nif (condição) instrução_se_condição_verdadeira; else instrução_se_condição_falsa; Por exemplo: (Leia-se: SE x for maior que zero, ENTÃO imprima na tela o texto \u0026ldquo;O valor de x é positivo\u0026rdquo;, SE NÃO, imprima na tela o texto \u0026ldquo;O valor de x é negativo ou igual a zero\u0026rdquo;. )\nif (x \u0026gt; 0) printf(\u0026quot;O valor de x é positivo.\u0026quot;); else printf(\u0026quot;O valor de x é negativo ou igual a zero.\u0026quot;); Da mesma forma, podemos criar blocos de instruções a partir do else. Por exemplo:\nif (x \u0026gt; 0){ printf(\u0026quot;O valor de x é positivo.\u0026quot;); x = x + 1; z = x; } else { printf(\u0026quot;O valor de x é negativo ou igual a zero.\u0026quot;); w = x; } Mais exemplos ... TODO É possível fazer o aninhamento da estrutura IF-ELSE.\nif (condição_01){ instrução_01; } else if (condição_02){ instrução_02; } else { instrução_03; } Exemplo:\nif (x \u0026gt; 0) { printf(\u0026quot;O valor de x é positivo.\u0026quot;); } else if (x \u0026lt; 0) { printf(\u0026quot;O valor de x é negativo.\u0026quot;); } else{ printf(\u0026quot;O valor de x é zero.\u0026quot;); } Podemos fazer quantos aninhamentos quisermos, por exemplo:\nif (lados == 3) { printf(\u0026quot;O polígono é um triângulo.\u0026quot;); } else if (lados == 4) { printf(\u0026quot;O polígono é um quadrilátero.\u0026quot;); } else if (lados == 5) { printf(\u0026quot;O polígono é um pentágono.\u0026quot;); } else if (lados == 6) { printf(\u0026quot;O polígono é um hexágono.\u0026quot;); } else if (lados == 7) { printf(\u0026quot;O polígono é um heptágono.\u0026quot;); } else{ printf(\u0026quot;Valor não identificado.\u0026quot;); } Como temos uma única linha de instrução para cada condição, poderíamos reescrever o código acima dessa forma:\nif (lados == 3) printf(\u0026quot;O polígono é um triângulo.\u0026quot;); else if (lados == 4) printf(\u0026quot;O polígono é um quadrilátero.\u0026quot;); else if (lados == 5) printf(\u0026quot;O polígono é um pentágono.\u0026quot;); else if (lados == 6) printf(\u0026quot;O polígono é um hexágono.\u0026quot;); else if (lados == 7) printf(\u0026quot;O polígono é um heptágono.\u0026quot;); else printf(\u0026quot;Valor não identificado.\u0026quot;); SWITCH-CASE # Blocos de códigos condicionais também podem ser criados com a estrutura SWITCH-CASE. A sintaxe é:\nswitch(variável){ case valor_1: instruções; //podem ser várias linhas de instruções break; case valor_2: instruções; break; ... case valor_m: instruções; break; default: instruções; } Por exemplo:\nswitch(lados){ case 3: printf(\u0026quot;O polígono é um triângulo.\u0026quot;); break; case 4: printf(\u0026quot;O polígono é um quadrilátero.\u0026quot;); break; case 5: printf(\u0026quot;O polígono é um pentágono.\u0026quot;); break; case 6: printf(\u0026quot;O polígono é um hexágono.\u0026quot;); break; case 7: printf(\u0026quot;O polígono é um heptágono.\u0026quot;); break; default: printf(\u0026quot;Valor não identificado.\u0026quot;); } Vamos entender:\n\u0026hellip;\nCondição ? verdadeiro : falso # Comandos de repetição # FOR # WHILE # DO WHILE # Comandos goto e continue # Funções # Mais sobre variáveis # Escopo de variáveis # Modificadores de variáveis # Constantes # Conversão de tipos # Definição de tipos # Arrays e Matrizes # Strings # Ponteiros # "},{"id":2,"href":"/docs/c-course/intermediate/","title":"2023 - Atividades","section":"Curso: Introdução à Programação com a Linguagem C","content":" Atividades # "},{"id":3,"href":"/docs/python/","title":"Curso: Programação com Python","section":"Docs","content":"Em breve.\n"},{"id":4,"href":"/docs/redes/","title":"Curso: Redes de Computadores","section":"Docs","content":"Em breve.\n"},{"id":5,"href":"/docs/python/expand/","title":"Expand","section":"Curso: Programação com Python","content":" Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample # Default # {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip; With Custom Label # {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label ... Markdown content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":6,"href":"/docs/python/hints/","title":"Hints","section":"Curso: Programação com Python","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":7,"href":"/docs/","title":"Docs","section":"Introduction","content":""}]